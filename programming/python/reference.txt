indentation must

comment => # (for multiline comment we can use triple qoutes """""" at the beginning and ending of the comment)

variables
 
  variables are containers for storing data values

  Variables do not need to be declared with any particular type, and can even change type after they have been set.

  eg:-
    a=5
    b="string"
  
  casting: If you want to specify the data type of a variable, this can be done with casting.
  
  python has the following data types built-in by default:-

  Text Type:	str
  Numeric Types:	int, float, complex
  Sequence Types:	list, tuple, range
  Mapping Type:	dict
  Set Types:	set, frozenset
  Boolean Type:	bool
  Binary Types:	bytes, bytearray, memoryview
  None Type:	None

  eg:-
    a=str(3)
    a=int(3)
    a=float(3)
  
  Get the Type: You can get the data type of a variable with the type() function.

  eg:-
    x=12
    print(type(x))
  
  Variable names are case-sensitive.

  A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )

  Many Values to Multiple Variables:

  eg:-
    a,b,c=1,2,3

  One Value to Multiple Variables:

  eg:-
    a=b=c="multi"

  for outputting variables print() function is used

  eg:-
    x="dndwc"
    print(x)
  
  In the print() function, you output multiple variables, separated by a comma:

  eg:-
    a=3
    b=3
    print(a,b)
  
  You can also use the + operator to output multiple variables:(it supports only strings and not be used with different data types and in numeric data type it acts as addition operator)

  eg:-
    a="fds"
    b="ewfd"
    c="WDFda"
    print(a+b+c)
  
  The best way to output multiple variables in the print() function is to separate them with commas, which even support different data types

  The global Keyword

  Normally, when you create a variable inside a function, that variable is local, and can only be used inside that function.
  To create a global variable inside a function, you can use the global keyword.

  eg:

    def myfunc():
    global x
    x = "fantastic"

    myfunc()

    print("Python is " + x)
  
   user input :
       use input() or for using any prompt input("name: ") 

python numbers
  
  You can convert from one type to another with the int(), float(), and complex() methods:

  eg:-
    
    x = 1    # int
    y = 2.8  # float
    z = 1j   # complex

    #convert from int to float:
    a = float(x)

    #convert from float to int:
    b = int(y)

    #convert from int to complex:
    c = complex(x)

Python Casting
 
  There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.
   
  eg:
    x = int(1)
    y = float(2)
    z = str(5) 

Python Strings
  
  Strings in python are surrounded by either single quotation marks, or double quotation marks

  Multiline Strings

  a = """Lorem ipsum dolor sit amet,
  consectetur adipiscing elit,
  sed do eiusmod tempor incididunt
  ut labore et dolore magna aliqua."""
  print(a)

  Strings are Arrays

  eg:-
    a = "Hello, World!"
    print(a[1])

  Looping Through a String

  eg:-
    for x in "banana":
       print(x)

  String Length

  eg:-
    a = "Hello, World!"
    print(len(a))

  Check String
  
  eg:-
    txt = "The best things in life are free!"
    print("free" in txt)

  Use it in an if statement:

  eg:-
    txt = "The best things in life are free!"
    if "free" in txt:
      print("yes free is present in txt")
    
  Check if NOT
  
  eg:-
    txt = "The best things in life are free!"
    print("expensive" not in txt)

  Slicing

  eg:-
    b = "Hello, World!"
    print(b[2:5])

  Slice From the Start

  eg:-
    b = "Hello, World!"
    print(b[:5])

  Slice To the End

  eg:-
    b = "Hello, World!"
    print(b[2:])

  Negative Indexing

  eg:-
    b = "Hello, World!"
    print(b[-5:-2])

  Python - Modify Strings

  a="hello, world"
  print(a.upper()) #change to upper case
  print(a.lower()) #change to lower case
  print(a.strip()) #remove white space
  print(a.split(",")) #spliting the string
  print(a.replace("h","i")) #replacing the letter

  Python - String Concatenation

  eg:-
   a = "Hello"
   b = "World"
   c = a + " " + b
   print(c)

  Python - Format - Strings

  The format() method takes the passed arguments, formats them, and places them in the string where the placeholders {} are:

  You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:

  quantity = 3
  itemno = 567
  price = 49.95
  myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
  print(myorder.format(quantity, itemno, price))

  Python - Escape Characters

  To insert characters that are illegal in a string, use an escape character.

  An escape character is a backslash \ followed by the character you want to insert.

  eg:-
    txt = "We are the so-called \"Vikings\" from the north."

    \'	Single Quote	
    \\	Backslash	
    \n	New Line	
    \r	Carriage Return	
    \t	Tab	
    \b	Backspace	
    \f	Form Feed	
    \ooo	Octal value	
    \xhh	Hex value

python boolean
  
  eg:-
    print(10 > 9)
    print(10 == 9)
    print(10 < 9)
  
  The bool() function allows you to evaluate any value, and give you True or False in return

  Almost any value is evaluated to True if it has some sort of content.

  Any string is True, except empty strings.

  Any number is True, except 0.

  Any list, tuple, set, and dictionary are True, except empty ones.

  Python also has many built-in functions that return a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type

  eg:-
    x = 200
    print(isinstance(x, int))

Python Operators

  Arithmetic Operators
    +	Addition: adds two operands	x + y
    –	Subtraction: subtracts two operands	x – y
    *	Multiplication: multiplies two operands	x * y
    /	Division (float): divides the first operand by the second	x / y
    //	Division (floor): divides the first operand by the second	x // y
    %	Modulus: returns the remainder when the first operand is divided by the second	x % y
    **	Power: Returns first raised to power second	x ** y

  Comparison Operators
    >	Greater than: True if the left operand is greater than the right	x > y
    <	Less than: True if the left operand is less than the right	x < y
    ==	Equal to: True if both operands are equal	x == y
    !=	Not equal to – True if operands are not equal	x != y
    >=	Greater than or equal to True if the left operand is greater than or equal to the right	x >= y
    <=	Less than or equal to True if the left operand is less than or equal to the right	x <= y
    is 	x is the same as y	x is y
    is not	x is not the same as y	x is not y

  Logical Operators
    and	Logical AND: True if both the operands are true	x and y
    or	Logical OR: True if either of the operands is true 	x or y
    not	Logical NOT: True if the operand is false 	not x

  Bitwise Operators
    Bitwise AND	x & y
    |	Bitwise OR	x | y
    ~	Bitwise NOT	~x
    ^	Bitwise XOR	x ^ y
    >>	Bitwise right shift	x>>
    <<	Bitwise left shift	x<<
  
  Assignment Operators 
    =	Assign value of right side of expression to left side operand 	x = y + z
    +=	Add AND: Add right-side operand with left side operand and then assign to left operand	a+=b     a=a+b
    -=	Subtract AND: Subtract right operand from left operand and then assign to left operand	a-=b     a=a-b
    *=	Multiply AND: Multiply right operand with left operand and then assign to left operand	a*=b     a=a*b
    /=	Divide AND: Divide left operand with right operand and then assign to left operand	a/=b     a=a/b
    %=	Modulus AND: Takes modulus using left and right operands and assign the result to left operand	a%=b     a=a%b
    //=	Divide(floor) AND: Divide left operand with right operand and then assign the value(floor) to left operand	a//=b     a=a//b
    **=	Exponent AND: Calculate exponent(raise power) value using operands and assign value to left operand	a**=b     a=a**b
    &=	Performs Bitwise AND on operands and assign value to left operand	a&=b     a=a&b
    |=	Performs Bitwise OR on operands and assign value to left operand	a|=b     a=a|b
    ^=	Performs Bitwise xOR on operands and assign value to left operand	a^=b     a=a^b
    >>=	Performs Bitwise right shift on operands and assign value to left operand	a>>=b     a=a>>b
    <<=	Performs Bitwise left shift on operands and assign value to left operand	a <<= b     a= a << b
  
  Identity Operators
    is          True if the operands are identical 
    is not      True if the operands are not identical 

  Membership Operators
    in            True if value is found in the sequence
    not in        True if value is not found in the sequence

Python If ... Else
   
  eg:-
    a = 200
    b = 33
    if b > a:
      print("b is greater than a")
    elif a == b:
      print("a and b are equal")
    else:
      print("a is greater than b")

  Short Hand If

  if a > b: print("a is greater than b")

  Short Hand If ... Else

  a = 2
  b = 330
  print("A") if a > b else print("B")

  You can also have multiple else statements on the same line:

  a = 330
  b = 330
  print("A") if a > b else print("=") if a == b else print("B")

Python Loops
  
  The while Loop
    i = 1
    while i < 6:
      print(i)
      i += 1

    The break Statement : With the break statement we can stop the loop even if the while condition is true

    The continue Statement : With the continue statement we can stop the current iteration, and continue with the next
    
    The else Statement : With the else statement we can run a block of code once when the condition no longer is true
      i = 1
      while i < 6:
        print(i)
        i += 1
      else:
        print("i is no longer less than 6")

  For loop

    fruits = ["apple", "banana", "cherry"]
    for x in fruits:
      print(x)

    The range() Function

    The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.

      for x in range(6):
        print(x)

      for x in range(2, 30, 3):
        print(x)
    
    Else in For Loop

      for x in range(6):
        print(x)
      else:
        print("Finally finished!")

    Nested Loops

      adj = ["red", "big", "tasty"]
      fruits = ["apple", "banana", "cherry"]
      for x in adj:
        for y in fruits:
          print(x, y)

    The pass Statement

      for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.
      
      for x in [0, 1, 2]:
        pass

Python list

  Lists are used to store multiple items in a single variable.

  Lists are created using square brackets

  List items are indexed, the first item has index [0], the second item has index [1] etc.

  To determine how many items a list has, use the len() function

  List items can be of any data type and A list can contain different data types



  eg-
    list1 = ["abc", 34, True, 40, "male"]

  The list() Constructor

  It is also possible to use the list() constructor when creating a new list.

  eg:-
    thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
    print(thislist)

  Access Items

    we can access items through indexing,negative indexing and through ranges of indexing

    Check if Item Exists

      thislist = ["apple", "banana", "cherry"]
      if "apple" in thislist:
        print("Yes, 'apple' is in the fruits list")
  
  Python - Add List Items

    thislist = ["apple", "banana", "cherry"]
    thislist[1] = "blackcurrant"
    print(thislist)

    thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
    thislist[1:3] = ["blackcurrant", "watermelon"]
    print(thislist)
  
    Insert Items

    thislist = ["apple", "banana", "cherry"]
    thislist.insert(2, "watermelon")
    print(thislist)

    thislist = ["apple", "banana", "cherry"]
    thislist.append("orange")
    print(thislist)

    thislist = ["apple", "banana", "cherry"]
    tropical = ["mango", "pineapple", "papaya"]
    thislist.extend(tropical)
    print(thislist)

    The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).

  Python - remove list items


    The pop() method removes the specified index.

    thislist = ["apple", "banana", "cherry"]
    thislist.remove("banana")
    print(thislist)

    If you do not specify the index, the pop() method removes the last item.

    thislist = ["apple", "banana", "cherry"]
    thislist.pop(1)
    print(thislist)

    The del keyword also removes the specified index:

    thislist = ["apple", "banana", "cherry"]
    del thislist[0]
    print(thislist)

    The del keyword can also delete the list completely.

    thislist = ["apple", "banana", "cherry"]
    del thislist

    Clear the List

    the clear() method empties the list.
    The list still remains, but it has no content.

    thislist = ["apple", "banana", "cherry"]
    thislist.clear()
    print(thislist)

  looping - list

     thislist = ["apple", "banana", "cherry"]
     for x in thislist:
        print(x)

     thislist = ["apple", "banana", "cherry"]
     for i in range(len(thislist)):
        print(thislist[i])

     A short hand for loop that will print all items in a list:

     thislist = ["apple", "banana", "cherry"]
     [print(x) for x in thislist]
  
  list comprehension

    List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.

    newlist = [expression for item in iterable if condition == True]

    fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
    newlist = [x for x in fruits if "a" in x]
    print(newlist)

  Python - Sort Lists

    thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
    thislist.sort()
    print(thislist)
     
    thislist = [100, 50, 65, 82, 23]
    thislist.sort()
    print(thislist)

    thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
    thislist.sort(reverse = True)
    print(thislist)

    By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters:

    thislist = ["banana", "Orange", "Kiwi", "cherry"]
    thislist.sort(key = str.lower)
    print(thislist)

    Reverse Order

    The reverse() method reverses the current sorting order of the elements.

    thislist = ["banana", "Orange", "Kiwi", "cherry"]
    thislist.reverse()
    print(thislist)

    Copy a List

    thislist = ["apple", "banana", "cherry"]
    mylist = thislist.copy()
    print(mylist)

    thislist = ["apple", "banana", "cherry"]
    mylist = list(thislist)
    print(mylist)

    Python - Join Lists

    list1 = ["a", "b", "c"]
    list2 = [1, 2, 3]
    list3 = list1 + list2
    print(list3)

    list1 = ["a", "b" , "c"]
    list2 = [1, 2, 3]
    for x in list2:
      list1.append(x)
    print(list1)

    list1 = ["a", "b" , "c"]
    list2 = [1, 2, 3]
    list1.extend(list2)
    print(list1)

Python tuples

  mytuple = ("apple", "banana", "cherry")

  Tuples are used to store multiple items in a single variable.
   
  A tuple is a collection which is ordered and unchangeable and allow duplicate values

  Tuples are written with round brackets.

  thistuple = ("apple", "banana", "cherry")
  print(len(thistuple))

  thistuple = ("apple",)
  print(type(thistuple))

  #NOT a tuple
  thistuple = ("apple")
  print(type(thistuple))

  The tuple() Constructor

  thistuple = tuple(("apple", "banana", "cherry")) # note the double round-brackets
  print(thistuple)

  Access Tuple Items

    thistuple = ("apple", "banana", "cherry")
    print(thistuple[1])

  python - update tuples

    Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.

    But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.
    
    x = ("apple", "banana", "cherry")
    y = list(x)
    y[1] = "kiwi"
    x = tuple(y)
    print(x) 

    Add tuple to a tuple. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:

    thistuple = ("apple", "banana", "cherry")
    y = ("orange",)
    thistuple += y
    print(thistuple)

    you cant remove items in tuple , change into  list and remove it

  python - unpack tuples

    When we create a tuple, we normally assign values to it. This is called "packing" a tuple

    But, in Python, we are also allowed to extract the values back into variables. This is called "unpacking":

    fruits = ("apple", "banana", "cherry")
    (green, yellow, red) = fruits
    print(green)
    print(yellow)
    print(red)

    Using Asterisk*:

    If the number of variables is less than the number of values, you can add an * to the variable name and the values will be assigned to the variable as a list:

     fruits = ("apple", "mango", "papaya", "pineapple", "cherry")
     (green, *tropic, red) = fruits
      print(green)
      print(tropic)
      print(red)

  python - loop tuples

    thistuple = ("apple", "banana", "cherry")
    for x in thistuple:
    print(x)

  Python - Join Tuples

     tuple1 = ("a", "b" , "c")
     tuple2 = (1, 2, 3)
     tuple3 = tuple1 + tuple2
     print(tuple3)

     fruits = ("apple", "banana", "cherry")
     mytuple = fruits * 2
     print(mytuple)  

Python -sets

  Sets are used to store multiple items in a single variable.
                                                                                                                                                                                            
  A set is a collection which is unordered, unchangeable*, and unindexed and do not allow duplicate values.

  thisset = {"apple", "banana", "cherry","apple"}
  print(thisset)

  The set() Constructor

  thisset = set(("apple", "banana", "cherry")) # note the double round-brackets
  print(thisset)

  access items

    thisset = {"apple", "banana", "cherry"}
    for x in thisset:
    print(x)

  add items

    Once a set is created, you cannot change its items, but you can add new items.

    thisset = {"apple", "banana", "cherry"}
    thisset.add("orange")
    print(thisset)

    The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).

    thisset = {"apple", "banana", "cherry"}
    mylist = ["kiwi", "orange"]
    thisset.update(mylist)
    print(thisset)

  Python - Remove Set Items

    To remove an item in a set, use the remove(), or the discard() method.
   
    thisset = {"apple", "banana", "cherry"}
    thisset.remove("banana")
    print(thisset)

    thisset = {"apple", "banana", "cherry"}
    thisset.discard("banana")
    print(thisset)

    If the item to remove does not exist, remove() will raise an error.If the item to remove does not exist, discard() will NOT raise an error.

    Sets are unordered, so when using the pop() method, you do not know which item that gets removed.

  Join Two Sets

     set1 = {"a", "b" , "c"}
     set2 = {1, 2, 3}
     set3 = set1.union(set2)
     print(set3)

     set1 = {"a", "b" , "c"}
     set2 = {1, 2, 3}
     set1.update(set2)
     print(set1)

    Keep ONLY the Duplicates

    x = {"apple", "banana", "cherry"}
    y = {"google", "microsoft", "apple"}
    x.intersection_update(y)
    print(x)

    x = {"apple", "banana", "cherry"}
    y = {"google", "microsoft", "apple"}
    z = x.intersection(y)
    print(z)

    Keep All, But NOT the Duplicates

    x = {"apple", "banana", "cherry"}
    y = {"google", "microsoft", "apple"}
    x.symmetric_difference_update(y)
    print(x)

    The symmetric_difference() method will return a new set, that contains only the elements that are NOT present in both sets.

python dictionaries

  Dictionaries are used to store data values in key:value pairs.
  A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

  thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
  }
  print(thisdict)

  Accessing Items

    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
    x = thisdict["model"]
    x = thisdict.get("model")

    Get Keys

    x = thisdict.keys()

    Get Values

    x = thisdict.values()

    Get Items

    x = thisdict.items()

  Python - Change Dictionary Items

    Change Values

    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
    thisdict["year"] = 2018
    hisdict.update({"year": 2020})

  Python - Add Dictionary Items

    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964 
    }
    thisdict["color"] = "red"
    thisdict.update({"color": "red"})

  Python - Remove Dictionary Items

    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
    thisdict.pop("model")
    print(thisdict)

    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
    thisdict.popitem()
    print(thisdict)

    The del keyword removes the item with the specified key name:

    del thisdict["model"]

    The del keyword can also delete the dictionary completely:

    del thisdict

    The clear() method empties the dictionary:

    thisdict.clear()

  Python - Loop Dictionaries

    Print all key names in the dictionary, one by one:

    Print all key names in the dictionary, one by one:
    for x in thisdict:
      print(x)

    Print all values in the dictionary, one by one:
    for x in thisdict:
      print(thisdict[x])

    You can also use the values() method to return values of a dictionary:
    for x in thisdict.values():
      print(x)

    You can use the keys() method to return the keys of a dictionary:
    for x in thisdict.keys():
      print(x)

    Loop through both keys and values, by using the items() method:
    for x, y in thisdict.items():
      print(x, y)

  Python - Copy Dictionaries

    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
    mydict = thisdict.copy()
    print(mydict)

    Another way to make a copy is to use the built-in function dict().
    
    thisdict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
    }
    mydict = dict(thisdict)
    print(mydict)

    Nested Dictionaries

    myfamily = {
     "child1" : {
     "name" : "Emil",
     "year" : 2004
    },
     "child2" : {
     "name" : "Tobias",
     "year" : 2007
    },
     "child3" : {
     "name" : "Linus",
     "year" : 2011
    }
    }

       or

    child1 = {
     "name" : "Emil",
     "year" : 2004
    }
    child2 = {
      "name" : "Tobias",
      "year" : 2007
    }
    child3 = {
     "name" : "Linus",
     "year" : 2011
    } 

    myfamily = {
     "child1" : child1,
     "child2" : child2,
     "child3" : child3
    }

Python Collections (Arrays)
  
  There are four collection data types in the Python programming language:

  List is a collection which is ordered and changeable. Allows duplicate members.
  Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
  Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
  Dictionary is a collection which is ordered** and changeable. No duplicate members.
  
Python functions

  A function is a block of code which only runs when it is called.
  You can pass data, known as parameters, into a function.
  A function can return data as a result.

  Creating a Function

  def my_function():
    print("Hello from a function")

  Calling a Function

  def my_function():
    print("Hello from a function")
  my_function()

  Arguments

  def my_function(fname):
    print(fname + " Refsnes")

  my_function("Emil")
  my_function("Tobias")
  my_function("Linus")

  Number of Arguments

  def my_function(fname, lname):
    print(fname + " " + lname)
  my_function("Emil", "Refsnes")

  Arbitrary Arguments, *args

  If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.
  This way the function will receive a tuple of arguments, and can access the items accordingly:

  def my_function(*kids):
    print("The youngest child is " + kids[2])
  my_function("Emil", "Tobias", "Linus")

  Keyword Arguments

  You can also send arguments with the key = value syntax.
  This way the order of the arguments does not matter.

  def my_function(child3, child2, child1):
    print("The youngest child is " + child3)
  my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

  Arbitrary Keyword Arguments, **kwargs

  If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.

  def my_function(**kid):
    print("His last name is " + kid["lname"])
  my_function(fname = "Tobias", lname = "Refsnes")

  Default Parameter Value

  If we call the function without argument, it uses the default value:

  def my_function(country = "Norway"):
    print("I am from " + country)
  my_function("Sweden")
  my_function()

  Passing a List as an Argument

  You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.

  def my_function(food):
    for x in food:
      print(x)
  fruits = ["apple", "banana", "cherry"]
  my_function(fruits)

  Return Values

  To let a function return a value, use the return statement:

  def my_function(x):
    return 5 * x
  print(my_function(3))
  print(my_function(5))

  The pass Statement 

  function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.

  def myfunction():
    pass

Python Lambda

  A lambda function is a small anonymous function.
  A lambda function can take any number of arguments, but can only have one expression.

  def myfunc(n):
    return lambda a : a * n
  mydoubler = myfunc(2)
  mytripler = myfunc(3)
  print(mydoubler(11))
  print(mytripler(11))

  Use lambda functions when an anonymous function is required for a short period of time.

Python Arrays

  Python does not have built-in support for Arrays, but Python Lists can be used instead.

function description => 

function         list               tuples               set              dictionary 
                 []                 ()                   {}               {key:value}
format           ordered            ordered              unordered        unordered
duplication      allow              allow                not              no duplicate keys
mutable          yes                no                   yes              yes

inserting=>

append()         1                  0                    0                0
insert()         1                  0                    0                0
extend()         1                  0                    0                0
add()            0                  0                    1                0
update()         0                  0                    1                1

remove=>

clear()          1                  0                    1                1
pop()            1                  0                    1                1
remove()         1                  0                    1                0
discard()        0                  0                    1                0

other operations=>

count()          1                  1                    0                0
index()          1                  1                    0                0
reverse()        1                  0                    0                0
sort()           1                  0                    0                0

set specific => 

  difference()
  difference_update()

  symmetric_difference()
  symmetric_difference_update()

  intersection()
  intersection_update()

  isdisjoint()
  issubset()
  issuperset()

  union()

dictiona  ry specific =>

  fromkeys()

  get()

  values()
  keys()
  items()

  setdefault()

  string

string specific=>

  .....All string methods returns new values. They do not change the original string.....

  capitalize()  -> Converts the first character to upper case
  lower()  -> 	Converts string into lower case
  upper()  ->  Converts a string into upper case
  swapcase()  -> Swaps cases, lower case becomes upper case and vice versa

  isalnum()  -> alphabet letter (a-z) and numbers (0-9).
  isalpha()  ->  alphabet letters (a-z).
  isnumeric()  -> numeric (0-9)

  isspace()  -> Check if all the characters in the text are whitespaces

  count()  -> The count() method returns the number of times a specified value appears in the string
  string.count(value, start, end)

  endswith()  -> The endswith() method returns True if the string ends with the specified value
  string.endswith(value, start, end)

  startswith()  -> The startswith() method returns True if the string starts with the specified value
  string.startswith(value, start, end)

  find()  -> The find() method finds the first occurrence of the specified value.
  rfind()  -> The rfind() method finds the last occurrence of the specified value

  join()  ->
  The join() method takes all items in an iterable and joins them into one string.
  A string must be specified as the separator.
  string.join(iterable)

  partition()  -> The partition() method searches for a specified string, and splits the string into a tuple containing three elements.

  replace()  -> The replace() method replaces a specified phrase with another specified phrase.
  string.replace(oldvalue, newvalue, count)

  split()  -> The split() method splits a string into a list.
  splitlines()  -> The splitlines() method splits a string into a list. The splitting is done at line breaks.


  strip()  -> The strip() method removes any leading, and trailing whitespaces
  You can specify which character(s) to remove, if not, any whitespaces will be removed

built-in functions =>

  chr()
  int()
  float()
  str()
  bool()

  list()
  tuple()
  set()
  frozenset()
  dict()

  isinstance() -> Returns True if a specified object is an instance of a specified object
  type() -> 	Returns the type of an object

  len() ->  Returns the length of an object

  sorted -> returns sorted items

  abs() -> returns the absolute value of the specified number.

  all() -> returns True if all items in an iterable are true,
  any() -> Returns True if any item in an iterable object is true

  bin() -> Returns the binary version of a number
  ord() -> Convert an integer representing the Unicode of the specified character

  sum() -> 	Sums the items of an iterator
  pow() ->  Returns the value of x to the power of y
  min() -> 	Returns the smallest item in an iterable
  max() ->  Returns the largest item in an iterable
  divmod() -> 	Returns the quotient and the remainder when argument1 is divided by argument2

  round() -> 	Rounds a numbers
    x = round(5.76543, 2)

  slice() -> 	Returns a slice object
    a = ("a", "b", "c", "d", "e", "f", "g", "h")
    x = slice(2)
    print(a[x])

  reversed() -> Returns a reversed iterator
    alph = ["a", "b", "c", "d"]
    ralph = reversed(alph)
    for x in ralph:
      print(x)

  
  filter() -> The filter() function returns an iterator where the items are filtered through a function to test if the item is accepted or not
    ages = [5, 12, 17, 18, 24, 32]
    def myFunc(x):
    if x < 18:
      return False
    else:
      return True
    adults = filter(myFunc, ages)
    for x in adults:
      print(x)
    
  map() -> The map() function executes a specified function for each item in an iterable. The item is sent to the function as a parameter.
    def myfunc(n):
      return len(n)
    x = map(myfunc, ('apple', 'banana', 'cherry'))

  enumerate() -> The enumerate() function takes a collection (e.g. a tuple) and returns it as an enumerate object.
    x = ('apple', 'banana', 'cherry')
    y = enumerate(x)






